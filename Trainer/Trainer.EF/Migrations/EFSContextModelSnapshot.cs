// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Trainer.EF.Migrations
{
    [DbContext(typeof(EFSContext))]
    partial class EFSContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Trainer.EF.Models.Articles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<byte>("CategoryId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ProfilePicture")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Trainer.EF.Models.ArticlesCategories", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProfilePicture")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Articles_Categories");
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Hometown");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Trainer.EF.Models.Calories", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.ToTable("Calories");
                });

            modelBuilder.Entity("Trainer.EF.Models.Championships", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Place")
                        .IsRequired();

                    b.Property<string>("ProfilePicture")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Championships");
                });

            modelBuilder.Entity("Trainer.EF.Models.Clients", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsDocuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientID")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<bool>("SentToClient");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Clients_Documents");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsImages", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Clients_Images");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsMeasurments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("TypeId");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Clients_Measurments");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsOverloads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("TypeId");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Clients_Overloads");
                });

            modelBuilder.Entity("Trainer.EF.Models.Measurments", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<byte>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("Measurments");
                });

            modelBuilder.Entity("Trainer.EF.Models.MigrationHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150);

                    b.Property<string>("ContextKey")
                        .HasMaxLength(300);

                    b.Property<byte[]>("Model")
                        .IsRequired();

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("MigrationId", "ContextKey");

                    b.ToTable("__MigrationHistory");
                });

            modelBuilder.Entity("Trainer.EF.Models.Overloads", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<byte>("TypeId");

                    b.HasKey("Id");

                    b.ToTable("Overloads");
                });

            modelBuilder.Entity("Trainer.EF.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("ProdDate")
                        .HasColumnType("date");

                    b.Property<string>("ProfilePicture")
                        .IsRequired();

                    b.Property<byte>("SubcategoryId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProductsCategories", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProfilePicture");

                    b.HasKey("Id");

                    b.ToTable("Products_Categories");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProductsImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Products_Images");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProductsOwners", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("ContactInfo")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Products_Owners");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProductsSubcategories", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProfilePicture");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products_Subcategories");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProgramsImages", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<byte>("ProgramId");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Programs_Images");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProgramsPrices", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<byte>("ProgramId");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("Programs_Prices");
                });

            modelBuilder.Entity("Trainer.EF.Models.Trainers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(128);

                    b.Property<string>("Bio")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Trainer.EF.Models.TrainersPrograms", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProfilePicture")
                        .IsRequired();

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Trainers_Programs");
                });

            modelBuilder.Entity("Trainer.EF.Models.Articles", b =>
                {
                    b.HasOne("Trainer.EF.Models.AspNetUsers", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Articles_AspNetUsers");

                    b.HasOne("Trainer.EF.Models.ArticlesCategories", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Articles_Articles_Categories");
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Trainer.EF.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Trainer.EF.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Trainer.EF.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Trainer.EF.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Trainer.EF.Models.AspNetUsers", b =>
                {
                    b.HasOne("Trainer.EF.Models.Clients", "IdNavigation")
                        .WithOne("AspNetUsers")
                        .HasForeignKey("Trainer.EF.Models.AspNetUsers", "Id")
                        .HasConstraintName("FK_AspNetUsers_Clients");

                    b.HasOne("Trainer.EF.Models.ProductsOwners", "Id1")
                        .WithOne("AspNetUsers")
                        .HasForeignKey("Trainer.EF.Models.AspNetUsers", "Id")
                        .HasConstraintName("FK_AspNetUsers_Products_Owners");

                    b.HasOne("Trainer.EF.Models.Trainers", "Id2")
                        .WithOne("AspNetUsers")
                        .HasForeignKey("Trainer.EF.Models.AspNetUsers", "Id")
                        .HasConstraintName("FK_AspNetUsers_Trainers");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsDocuments", b =>
                {
                    b.HasOne("Trainer.EF.Models.Clients", "Client")
                        .WithMany("ClientsDocuments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Clients_Documents_Clients");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsImages", b =>
                {
                    b.HasOne("Trainer.EF.Models.Clients", "Client")
                        .WithMany("ClientsImages")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Clients_Images_Clients");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsMeasurments", b =>
                {
                    b.HasOne("Trainer.EF.Models.Clients", "Client")
                        .WithMany("ClientsMeasurments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Clients_Measurments_Clients");
                });

            modelBuilder.Entity("Trainer.EF.Models.ClientsOverloads", b =>
                {
                    b.HasOne("Trainer.EF.Models.Clients", "Client")
                        .WithMany("ClientsOverloads")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK_Clients_Overloads_Clients");
                });

            modelBuilder.Entity("Trainer.EF.Models.Products", b =>
                {
                    b.HasOne("Trainer.EF.Models.ProductsOwners", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Products_Products_Owners");

                    b.HasOne("Trainer.EF.Models.ProductsSubcategories", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .HasConstraintName("FK_Products_Products_Subcategories");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProductsImages", b =>
                {
                    b.HasOne("Trainer.EF.Models.Products", "Product")
                        .WithMany("ProductsImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Products_Images_Products");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProductsSubcategories", b =>
                {
                    b.HasOne("Trainer.EF.Models.ProductsCategories", "Category")
                        .WithMany("ProductsSubcategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Subcategories_Products_Categories");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProgramsImages", b =>
                {
                    b.HasOne("Trainer.EF.Models.TrainersPrograms", "Program")
                        .WithMany("ProgramsImages")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_Programs_Images_Trainers_Programs");
                });

            modelBuilder.Entity("Trainer.EF.Models.ProgramsPrices", b =>
                {
                    b.HasOne("Trainer.EF.Models.TrainersPrograms", "Program")
                        .WithMany("ProgramsPrices")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_Programs_Prices_Trainers_Programs");
                });

            modelBuilder.Entity("Trainer.EF.Models.TrainersPrograms", b =>
                {
                    b.HasOne("Trainer.EF.Models.Trainers", "Trainer")
                        .WithMany("TrainersPrograms")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FK_Trainers_Programs_Trainers");
                });
#pragma warning restore 612, 618
        }
    }
}
