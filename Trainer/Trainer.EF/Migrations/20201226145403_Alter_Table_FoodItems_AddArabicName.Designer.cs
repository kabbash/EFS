// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trainer.EF;

namespace Trainer.EF.Migrations
{
    [DbContext(typeof(EFSContext))]
    [Migration("20201226145403_Alter_Table_FoodItems_AddArabicName")]
    partial class Alter_Table_FoodItems_AddArabicName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Shared.Core.Models.Articles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubFolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Shared.Core.Models.ArticlesCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("PredefinedKey")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("Articles_Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 12, 26, 14, 53, 59, 116, DateTimeKind.Utc).AddTicks(9657),
                            CreatedBy = "admin",
                            Name = "وصفات الطعام",
                            PredefinedKey = 2,
                            ProfilePicture = "Files/Articles%20Categories/food.png"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 12, 26, 14, 53, 59, 119, DateTimeKind.Utc).AddTicks(7724),
                            CreatedBy = "admin",
                            Name = "الأخبار",
                            PredefinedKey = 1,
                            ProfilePicture = "Files/Articles%20Categories/news.png"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 12, 26, 14, 53, 59, 119, DateTimeKind.Utc).AddTicks(7808),
                            CreatedBy = "admin",
                            Name = "البطولات",
                            PredefinedKey = 3,
                            ProfilePicture = "Files/Articles%20Categories/championships.png"
                        });
                });

            modelBuilder.Entity("Shared.Core.Models.ArticlesImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ArticlesImages");
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1d2b6cf6-8e86-46e9-9df2-2cdfc8f906f3",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "07ab2dd0-83e1-49a4-a8dc-66d948355392",
                            Name = "Regular User"
                        },
                        new
                        {
                            Id = "6a883f63-ef24-4693-a10f-ac30aaca972e",
                            Name = "Articles Writer"
                        });
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "7c654344-ad42-4428-a77a-00a8c1299c3f",
                            RoleId = "1d2b6cf6-8e86-46e9-9df2-2cdfc8f906f3"
                        },
                        new
                        {
                            UserId = "948f5fb5-00ce-4d61-9e4b-741290e20024",
                            RoleId = "6a883f63-ef24-4693-a10f-ac30aaca972e"
                        },
                        new
                        {
                            UserId = "b62f98ba-68ea-45d0-8209-48ee24d40e53",
                            RoleId = "07ab2dd0-83e1-49a4-a8dc-66d948355392"
                        });
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Hometown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "7c654344-ad42-4428-a77a-00a8c1299c3f",
                            AccessFailedCount = 0,
                            Email = "admin@efs.com",
                            EmailConfirmed = true,
                            FullName = "admin",
                            IsBlocked = false,
                            LockoutEnabled = false,
                            PasswordHash = new byte[] { 163, 144, 204, 222, 92, 43, 167, 162, 62, 139, 169, 196, 37, 33, 248, 29, 180, 30, 236, 10, 219, 196, 188, 188, 190, 147, 88, 56, 246, 251, 94, 72, 70, 103, 105, 219, 31, 60, 111, 74, 232, 213, 8, 34, 169, 240, 126, 77, 135, 39, 192, 46, 112, 180, 66, 168, 184, 49, 1, 174, 147, 20, 137, 171 },
                            PasswordSalt = new byte[] { 182, 205, 12, 108, 232, 74, 197, 215, 177, 121, 186, 238, 134, 46, 3, 178, 126, 207, 4, 46, 102, 213, 32, 185, 246, 237, 211, 6, 118, 226, 178, 124, 59, 136, 25, 99, 240, 139, 171, 69, 121, 167, 46, 23, 51, 28, 66, 171, 31, 169, 219, 36, 196, 92, 100, 196, 75, 218, 167, 32, 242, 97, 35, 124, 194, 163, 203, 235, 253, 219, 226, 252, 22, 120, 29, 169, 32, 150, 241, 132, 141, 184, 75, 80, 65, 123, 63, 85, 187, 141, 25, 22, 86, 131, 53, 84, 242, 222, 173, 189, 156, 20, 168, 66, 89, 3, 35, 135, 170, 240, 210, 37, 12, 251, 47, 196, 132, 29, 221, 233, 166, 83, 127, 225, 74, 208, 58, 83 },
                            PhoneNumber = "01097976064",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@efs.com"
                        },
                        new
                        {
                            Id = "948f5fb5-00ce-4d61-9e4b-741290e20024",
                            AccessFailedCount = 0,
                            Email = "writer@efs.com",
                            EmailConfirmed = true,
                            FullName = "articles writer",
                            IsBlocked = false,
                            LockoutEnabled = false,
                            PasswordHash = new byte[] { 241, 219, 246, 14, 140, 50, 116, 148, 194, 122, 87, 69, 187, 235, 145, 232, 190, 253, 228, 189, 211, 198, 176, 236, 64, 198, 218, 209, 241, 147, 21, 240, 28, 91, 141, 90, 218, 11, 164, 128, 69, 66, 181, 229, 237, 213, 34, 133, 217, 123, 232, 178, 253, 232, 89, 125, 132, 154, 210, 120, 134, 254, 251, 62 },
                            PasswordSalt = new byte[] { 182, 205, 12, 108, 232, 74, 197, 215, 177, 121, 186, 238, 134, 46, 3, 178, 126, 207, 4, 46, 102, 213, 32, 185, 246, 237, 211, 6, 118, 226, 178, 124, 59, 136, 25, 99, 240, 139, 171, 69, 121, 167, 46, 23, 51, 28, 66, 171, 31, 169, 219, 36, 196, 92, 100, 196, 75, 218, 167, 32, 242, 97, 35, 124, 194, 163, 203, 235, 253, 219, 226, 252, 22, 120, 29, 169, 32, 150, 241, 132, 141, 184, 75, 80, 65, 123, 63, 85, 187, 141, 25, 22, 86, 131, 53, 84, 242, 222, 173, 189, 156, 20, 168, 66, 89, 3, 35, 135, 170, 240, 210, 37, 12, 251, 47, 196, 132, 29, 221, 233, 166, 83, 127, 225, 74, 208, 58, 83 },
                            PhoneNumber = "01012345678",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "writer@gmail.com"
                        },
                        new
                        {
                            Id = "b62f98ba-68ea-45d0-8209-48ee24d40e53",
                            AccessFailedCount = 0,
                            Email = "user@efs.com",
                            EmailConfirmed = true,
                            FullName = "regular user",
                            IsBlocked = false,
                            LockoutEnabled = false,
                            PasswordHash = new byte[] { 241, 219, 246, 14, 140, 50, 116, 148, 194, 122, 87, 69, 187, 235, 145, 232, 190, 253, 228, 189, 211, 198, 176, 236, 64, 198, 218, 209, 241, 147, 21, 240, 28, 91, 141, 90, 218, 11, 164, 128, 69, 66, 181, 229, 237, 213, 34, 133, 217, 123, 232, 178, 253, 232, 89, 125, 132, 154, 210, 120, 134, 254, 251, 62 },
                            PasswordSalt = new byte[] { 182, 205, 12, 108, 232, 74, 197, 215, 177, 121, 186, 238, 134, 46, 3, 178, 126, 207, 4, 46, 102, 213, 32, 185, 246, 237, 211, 6, 118, 226, 178, 124, 59, 136, 25, 99, 240, 139, 171, 69, 121, 167, 46, 23, 51, 28, 66, 171, 31, 169, 219, 36, 196, 92, 100, 196, 75, 218, 167, 32, 242, 97, 35, 124, 194, 163, 203, 235, 253, 219, 226, 252, 22, 120, 29, 169, 32, 150, 241, 132, 141, 184, 75, 80, 65, 123, 63, 85, 187, 141, 25, 22, 86, 131, 53, 84, 242, 222, 173, 189, 156, 20, 168, 66, 89, 3, 35, 135, 170, 240, 210, 37, 12, 251, 47, 196, 132, 29, 221, 233, 166, 83, 127, 225, 74, 208, 58, 83 },
                            PhoneNumber = "01012345678",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user@efs.com"
                        });
                });

            modelBuilder.Entity("Shared.Core.Models.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ButtonText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Shared.Core.Models.Configurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Configurations");
                });

            modelBuilder.Entity("Shared.Core.Models.EntityRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemsForReviewId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ItemsForReviewId");

                    b.ToTable("EntityRatings");
                });

            modelBuilder.Entity("Shared.Core.Models.FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Alcohol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B12")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B5")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("B6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Caffiene")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Calcuim")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Carbs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Cholesterol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Copper")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("Cystine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Energy")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fiber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Folate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Histidine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Iron")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<decimal>("Isoleucine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Leucine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lysine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Magnesium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Manganese")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Methionine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monounsaturated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetCarbs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Omega3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Omega6")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Phenylalanine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Polyunsaturated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Potassium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Protein")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Saturated")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Selenium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sodium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Starch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Sugars")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Threonine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransFats")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tryptophan")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tyrosine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminC")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VitaminK")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Water")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Zinc")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("alanine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("argnine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("asparticAcid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("chromuim")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("florid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("glotamicAcid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("glycine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("hydroxiplorien")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("moly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("proline")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("serine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("yod")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("Shared.Core.Models.ItemsForReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("ItemsForReviews");
                });

            modelBuilder.Entity("Shared.Core.Models.OTrainingPrograms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OTrainingPrograms");
                });

            modelBuilder.Entity("Shared.Core.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubFolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shared.Core.Models.ProductsCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Products_Categories");
                });

            modelBuilder.Entity("Shared.Core.Models.ProductsImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Products_Images");
                });

            modelBuilder.Entity("Shared.Core.Models.Articles", b =>
                {
                    b.HasOne("Shared.Core.Models.ArticlesCategories", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Articles_Articles_Categories")
                        .IsRequired();

                    b.HasOne("Shared.Core.Models.AspNetUsers", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Core.Models.ArticlesImages", b =>
                {
                    b.HasOne("Shared.Core.Models.Articles", "Article")
                        .WithMany("Images")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("Shared.Core.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Shared.Core.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Core.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Shared.Core.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Core.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Core.Models.EntityRating", b =>
                {
                    b.HasOne("Shared.Core.Models.AspNetUsers", "Reviwer")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Shared.Core.Models.ItemsForReview", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ItemsForReviewId");
                });

            modelBuilder.Entity("Shared.Core.Models.FoodItem", b =>
                {
                    b.HasOne("Shared.Core.Models.AspNetUsers", "Author")
                        .WithMany()
                        .HasForeignKey("CreatedBy");
                });

            modelBuilder.Entity("Shared.Core.Models.Products", b =>
                {
                    b.HasOne("Shared.Core.Models.ProductsCategories", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Products_Products_Subcategories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Core.Models.AspNetUsers", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Products_AspNetUsers_CreatedBy")
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Core.Models.ProductsCategories", b =>
                {
                    b.HasOne("Shared.Core.Models.ProductsCategories", null)
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Shared.Core.Models.ProductsImages", b =>
                {
                    b.HasOne("Shared.Core.Models.Products", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Products_Images_Products")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
